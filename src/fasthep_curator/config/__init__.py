from __future__ import annotations

import importlib
import pathlib
from typing import Any

from omegaconf import DictConfig, OmegaConf

import fasthep_curator as fc

from .v0 import CuratorConfig, Dataset

DEFAULT_VERSION = 0


def load_config(config_file: str) -> Any:
    """Load a config file and return the structured config."""
    config_path = pathlib.Path(config_file)
    conf = OmegaConf.load(config_path)
    if not isinstance(conf, DictConfig):
        msg = f"Config file {config_file} is not a DictConfig, but {type(conf)}"
        raise TypeError(msg)
    # read version from config
    version = "v" + str(conf.get("version", DEFAULT_VERSION))
    cfg_class = importlib.import_module(f".{version}", __package__).CuratorConfig

    curator = cfg_class.from_dictconfig(conf)
    curator.metadata = {
        "config_file": str(config_path.absolute()),
        "name": config_path.stem,
    }
    return curator


def write_config(config: CuratorConfig, config_file: pathlib.Path | str) -> None:
    """Write a config file."""
    with pathlib.Path(config_file).open("w", encoding="utf-8") as f:
        OmegaConf.save(config, f)
        f.write("\n")
        f.write(
            f"# This file was generated by fasthep-curator version {fc.__version__}\n"
        )


__all__ = [
    "CuratorConfig",
    "Dataset",
    "load_config",
]
