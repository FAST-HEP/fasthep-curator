from __future__ import annotations

from fasthep_curator.config import CuratorConfig, Dataset, load_config, write_config


def test_load_config(dummy_config_file_v0):
    """Test loading a config file."""
    config = load_config(dummy_config_file_v0)
    assert isinstance(config, CuratorConfig)
    assert len(config.datasets) == 2
    for i, dataset in enumerate(config.datasets):
        assert isinstance(dataset, Dataset)
        assert dataset.eventtype == "data"
        assert dataset.tree == "events;1"
        assert dataset.nfiles == 1
        assert dataset.name == f"data{i + 1}"
        assert dataset.nevents == (i + 1) * 100
    assert config.metadata["config_file"] == str(dummy_config_file_v0)
    assert config.metadata["name"] == dummy_config_file_v0.stem


def test_write_config(tmp_path, dummy_config_file_v0):
    """Test writing a config file."""
    config = load_config(dummy_config_file_v0)
    config_file = tmp_path / "test_config.yaml"
    write_config(config, config_file)
    assert config_file.exists()
    with config_file.open("r", encoding="utf-8") as f:
        content = f.read()
    assert "# This file was generated by fasthep-curator" in content
